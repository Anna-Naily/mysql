USE vk;
Таблица лайков
DROP TABLE IF EXISTS likes;
CREATE TABLE likes (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  target_id INT UNSIGNED NOT NULL,
  target_type ENUM('messages', 'users', 'posts', 'media') NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Временная таблица типов лайков
DROP TABLE IF EXISTS target_types;
CREATE TEMPORARY TABLE target_types (
  name VARCHAR(100) NOT NULL UNIQUE
);

INSERT INTO target_types (name) VALUES 
  ('messages'),
  ('users'),
  ('media'),
  ('posts');


INSERT INTO likes 
  SELECT 
    id, 
    FLOOR(1 + (RAND() * 100)), 
    FLOOR(1 + (RAND() * 100)),
    (SELECT name FROM target_types ORDER BY RAND() LIMIT 1),
    CURRENT_TIMESTAMP 
  FROM messages;


SELECT * FROM likes LIMIT 10;

-- Таблица постов
DROP TABLE IF EXISTS posts;
CREATE TABLE posts (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  community_id INT UNSIGNED,
  head VARCHAR(255),
  body TEXT NOT NULL,
  media_id INT UNSIGNED,
  is_public BOOLEAN DEFAULT TRUE,
  is_archived BOOLEAN DEFAULT FALSE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
DESC media;
SELECT * FROM friendship_statuses;
SELECT * FROM media;
SELECT * FROM media_types;
SHOW TABLES;
SELECT * from posts;
SELECT * FROM likes;
UPDATE posts SET updated_at = NOW() WHERE updated_at < created_at;

-- Добавляем внешние ключи в БД vk

DESC profiles;

-- Добавляем внешние ключи для таблицы профилей
ALTER TABLE profiles
  ADD CONSTRAINT profiles_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE;
     
-- Добавляем внешние ключи для таблицы сообщений
ALTER TABLE messages
  ADD CONSTRAINT messages_from_user_id_fk 
    FOREIGN KEY (from_user_id) REFERENCES users(id),
  ADD CONSTRAINT messages_to_user_id_fk 
    FOREIGN KEY (to_user_id) REFERENCES users(id);
    
-- Добавляем внешние ключи для таблицы comunity_users
ALTER TABLE communities_users 
  ADD CONSTRAINT comunity_users_from_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
    ON DELETE CASCADE;
   
 -- Добавляем внешние ключи для таблицы comunity
ALTER TABLE communities_users
  ADD CONSTRAINT community_id_from_comunities 
    FOREIGN KEY (community_id) REFERENCES communities(id)
    ON DELETE CASCADE;  
   
-- Добавляем внешние ключи для таблицы friendship
ALTER TABLE friendship 
  ADD CONSTRAINT friendship_from_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT friendship_to_user_id_fk 
    FOREIGN KEY (friend_id) REFERENCES users(id);
   
   -- Добавляем внешние ключи для таблицы friendship связь с frienship_statuses
ALTER TABLE friendship 
  ADD CONSTRAINT friendship_status_from_friendship_statuses_fk 
    FOREIGN KEY (friendship_status_id) REFERENCES friendship_statuses(id)
    ON DELETE CASCADE;
   
    -- Добавляем внешние ключи для таблицы media связь с user_id и media_type
ALTER TABLE media
  ADD CONSTRAINT media_from_users_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT media_type_from_media_types_id_fk 
    FOREIGN KEY (media_type_id) REFERENCES media_types(id)
    ON DELETE CASCADE;
   
   ALTER TABLE media DROP FOREIGN KEY media_from_users_id_fk;
   
  -- Добавляем внешние ключи для таблицы posts
ALTER TABLE posts
  ADD CONSTRAINT post_from_users_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT post_from_community_id_fk 
    FOREIGN KEY (community_id) REFERENCES communities(id);
   
-- Добавляем внешние ключи для таблицы likes
ALTER TABLE likes
  ADD CONSTRAINT like_by_users_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT like_target_media_id_fk 
    FOREIGN KEY (target_id) REFERENCES media(id),
  ADD CONSTRAINT like_target_messages_id_fk 
    FOREIGN KEY (target_id) REFERENCES messages(id),
  ADD CONSTRAINT like_target_post_id_fk 
    FOREIGN KEY (target_id) REFERENCES posts(id),
  ADD CONSTRAINT like_target_user_id_fk 
    FOREIGN KEY (target_id) REFERENCES users(id);
    
   
 -- 3. Определить кто больше поставил лайков (всего) - мужчины или женщины?

SELECT COUNT(*) AS likes, gender FROM likes, profiles
WHERE likes.user_id = profiles.user_id
GROUP BY gender;
 
   
-- 4. Подсчитать общее количество лайков десяти самым молодым пользователям (сколько лайков получили 10 самых молодых пользователей).

SELECT * FROM likes;
SELECT birthday FROM profiles;
SELECT birthday FROM profiles ORDER BY birthday DESC LIMIT 10;

SELECT SUM(likes) 
FROM (SELECT COUNT(*) AS likes 
      FROM likes,profiles WHERE likes.target_id = profiles.user_id
	  GROUP BY target_id
	  ORDER BY profiles.birthday DESC LIMIT 10) AS countlikes;


-- 5. Найти 10 пользователей, которые проявляют наименьшую активность в использовании социальной сети

SELECT id, SUM(act) AS result_activity FROM  
	(SELECT id, 0 AS act FROM users
	UNION
	SELECT user_id AS id, count(*) AS act FROM media -- сколько каждый пользователь загрузил медиа
	GROUP BY user_id
	UNION
	SELECT user_id, COUNT(*) AS act FROM likes  -- сколько каждый пользователь поставил лайков
	GROUP BY user_id
	UNION
	SELECT from_user_id, COUNT(*) AS act FROM messages -- сколько каждый пользователь отправил сообщений
	GROUP BY from_user_id 
	UNION 
	SELECT user_id, COUNT(*) AS act FROM posts -- сколько каждый пользователь создал постов
	GROUP BY user_id) AS activities
 GROUP BY id ORDER BY result_activity LIMIT 10; -- выводим десятку с наименьшим показателем